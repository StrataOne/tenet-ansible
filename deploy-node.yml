---
- name: Deploy tenet node
  hosts: "node"
  become: true
  vars:
    go_version: 1.20.5
    go_root: /usr/local/go
    go_download_url: "https://golang.org/dl/go{{ go_version }}.linux-amd64.tar.gz"
    sync_by_snapshot: false
    pruning_nothing: true
    config: "mainnet"
#    config: "testnet"
#    config: "devnet"
  tasks:
    - name: Open firewall ports
      shell: ufw allow "{{ item }}"
      with_items:
        - 8545/tcp
        - 8546/tcp
        - 26656/tcp
        - 26657/tcp
        - 1317/tcp
        - 443/tcp

    - name: adduser tenetd to a system
      ansible.builtin.user:
        name: tenetd
        shell: /sbin/nologin
        create_home: yes

    - name: get the volume name
      command: "ls /mnt/"
      register: volume_name

    - name: unmount a mounted volume
      ansible.posix.mount:
        path: "/mnt/{{volume_name.stdout}}"
        state: unmounted

    - name: register the UUID
      command: "blkid -s UUID -o value /dev/sda"
      changed_when: false
      register: uuid_device

    - name: add the UUID to /etc/fstab
      blockinfile:
        path: "/etc/fstab"
        state: present
        block: |
          UUID={{ uuid_device.stdout }} /home/tenetd ext4 discard,errors=remount-ro 0 1

    - name: mount all
      ansible.builtin.shell:
        cmd: "mount -a"
      become: true

    - name: Check if Go is installed
      command: go version
      register: go_installed
      ignore_errors: yes

    - name: Install wget and tar
      package:
        name: "{{ item }}"
        state: present
      loop:
        - wget
        - tar

    - name: Download Go
      get_url:
        url: "{{ go_download_url }}"
        dest: "/tmp/go{{ go_version }}.linux-amd64.tar.gz"
      when: go_installed is failed

    - name: Remove old Go installation
      command: rm -rf {{ go_root }}
      args:
        removes: "{{ go_root }}"
      when: go_installed is not failed

    - name: Extract Go Archive
      unarchive:
        src: "/tmp/go{{ go_version }}.linux-amd64.tar.gz"
        dest: /usr/local
        remote_src: yes
        creates: "{{ go_root }}"
      when: go_installed is failed

    - name: Set Go Environment Variables
      blockinfile:
        path: /etc/profile
        block: |
          export GOROOT={{ go_root }}
          export PATH=$PATH:{{ go_root }}/bin

    - name: install cosmovisor go package
      become: true
      shell: "{{ go_root }}/bin/go install github.com/cosmos/cosmos-sdk/cosmovisor/cmd/cosmovisor@latest"
      environment:
        GOPATH: "/root/go"
        GOBIN: "/root/go/bin"

    - name: copy cosmovisor to a system
      become: true
      shell: "cp /root/go/bin/cosmovisor /usr/local/bin"

    - name: create directory for cosmovisor
      file:
        path: /home/tenetd/cosmovisor/genesis/bin
        state: directory

    - name: copy tenetd to a system
      become: true
      ansible.builtin.copy:
        src: ./bin/tenetd
        dest: /home/tenetd/cosmovisor/genesis/bin/tenetd
        owner: tenetd
        group: tenetd
        mode: 0644

    - name: copy tenet project configs to VMs
      ansible.builtin.copy:
        src: "./tenet-{{ config }}/"
        dest: "/home/tenetd/.tenetd/"
        owner: tenetd
        group: tenetd
        mode: 0644

    - name: change sync method
      replace:
        path: /home/tenetd/.tenetd/config/config.toml
        regexp: "enable = false"
        replace: "enable = true"
      when: sync_by_snapshot == true

    - name: change pruning rule
      replace:
        path: /home/tenetd/.tenetd/config/app.toml
        regexp: 'pruning = "default"'
        replace: 'pruning = "nothing"'
      when: pruning_nothing == true

    - name: cosmovisor init
      become_user: tenetd
      shell: cosmovisor init /home/tenetd/cosmovisor/genesis/bin/tenetd
      environment:
        DAEMON_NAME: tenetd
        DAEMON_HOME: /home/tenetd/.tenetd
        DAEMON_RESTART_AFTER_UPGRADE: true

    - name: create config directory for cosmovisor
      file:
        path: /etc/cosmovisor
        state: directory

    - name: create environment file
      template:
        src: cosmovisor.conf.j2
        dest: /etc/cosmovisor/cosmovisor.conf

    - name: create Unit file
      template:
        src: cosmovisor.service.j2
        dest: /etc/systemd/system/cosmovisor.service

    - name: reload systemctl
      command: systemctl daemon-reload

    - name: enable service cosmovisor.service, and not touch the state
      service:
        name: cosmovisor.service
        enabled: yes

    - name: restart service cosmovisor.service, in all cases
      service:
        name: cosmovisor.service
        state: restarted